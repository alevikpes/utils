# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.
  
    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://atlas.hashicorp.com/search.
    config.vm.box = "debian/stretch64"
    ENV['LC_ALL']="en_US.UTF-8"

    # Set a name for the vagrant box, else it will be default. If another
    # project uses also default, then they will use the same machine. To use
    # different machines we need to set the name.
    config.vm.define "vm-name"

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # config.vm.network "forwarded_port", guest: 80, host: 8080
  
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    config.vm.network "private_network", ip: "make.up.an.ip"
  
    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"
  
    # (Ole)
    # Copy the required version into
    # `odoo` and `enterprise` dirs in your current project root dir. They will
    # be used for your VM.

    # (Ole)
    # TODO: Investigate if it is also possible to specify a URL to the Odoo
    # repositiory instead of to the local directory. Example:
    # config.vm.synced_folder "<ssh to path/to/repo>, "/app/odoo", type:"sshfs"

    local_odoo = ""
    local_enterprise = ""
    if Dir.exist?("../../odoo-init")
        if (!Dir.exist?("../odoo"))
            local_odoo = "../odoo-init/"
        end
        if (!Dir.exist?("../enterprise"))
            local_enterprise = "../odoo-init/"
        end
    end

    odoo_dir = "../#{local_odoo}odoo"
    enterprise_dir = "../#{local_enterprise}enterprise"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    config.vm.synced_folder "#{odoo_dir}", "/app/odoo", type:"sshfs"
    config.vm.synced_folder "#{enterprise_dir}", "/app/odoo-enterprise", type:"sshfs"
    config.vm.synced_folder "../odoo-data-dir", "/app/odoo-data-dir", type:"sshfs"
    config.vm.synced_folder "../oca-addons", "/app/oca-addons", type:"sshfs"
    config.vm.synced_folder "../custom-addons", "/app/custom-addons", type:"sshfs"
  
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #    vb.gui = true
    #
       # Customize the amount of memory on the VM:
       #vb.memory = "2048"
       vb.memory = "4096"
    end
  
    # View the documentation for the provider you are using for more
    # information on available options.
  
    config.vm.provision "shell", inline: <<-SHELL
  
        sudo echo "LANG=en_US.UTF-8" >> /etc/environment
        sudo echo "LANGUAGE=en_US.UTF-8" >> /etc/environment
        sudo echo "LC_ALL=en_US.UTF-8" >> /etc/environment
        sudo echo "LC_CTYPE=en_US.UTF-8" >> /etc/environment
    SHELL
  
  
    config.vm.provision :shell, :path => "bootstrap.sh"
  
    # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
    # such as FTP and Heroku are also available. See the documentation at
    # https://docs.vagrantup.com/v2/push/atlas.html for more information.
    # config.push.define "atlas" do |push|
    #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
    # end
  
    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    # config.vm.provision "shell", inline: <<-SHELL
    #   apt-get update
    #   apt-get install -y apache2
    # SHELL
end
